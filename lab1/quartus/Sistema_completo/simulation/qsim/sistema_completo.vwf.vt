// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/18/2020 16:17:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sistema_completo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sistema_completo_vlg_sample_tst(
	BUTTONCL,
	BUTTONENA,
	CLK_OUT,
	sampler_tx
);
input  BUTTONCL;
input  BUTTONENA;
input  CLK_OUT;
output sampler_tx;

reg sample;
time current_time;
always @(BUTTONCL or BUTTONENA or CLK_OUT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sistema_completo_vlg_check_tst (
	DECENAS,
	UNIDADES,
	sampler_rx
);
input [6:0] DECENAS;
input [6:0] UNIDADES;
input sampler_rx;

reg [6:0] DECENAS_expected;
reg [6:0] UNIDADES_expected;

reg [6:0] DECENAS_prev;
reg [6:0] UNIDADES_prev;

reg [6:0] DECENAS_expected_prev;
reg [6:0] UNIDADES_expected_prev;

reg [6:0] last_DECENAS_exp;
reg [6:0] last_UNIDADES_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DECENAS_prev = DECENAS;
	UNIDADES_prev = UNIDADES;
end

// update expected /o prevs

always @(trigger)
begin
	DECENAS_expected_prev = DECENAS_expected;
	UNIDADES_expected_prev = UNIDADES_expected;
end


// expected DECENAS[ 6 ]
initial
begin
	DECENAS_expected[6] = 1'bX;
end 
// expected DECENAS[ 5 ]
initial
begin
	DECENAS_expected[5] = 1'bX;
end 
// expected DECENAS[ 4 ]
initial
begin
	DECENAS_expected[4] = 1'bX;
end 
// expected DECENAS[ 3 ]
initial
begin
	DECENAS_expected[3] = 1'bX;
end 
// expected DECENAS[ 2 ]
initial
begin
	DECENAS_expected[2] = 1'bX;
end 
// expected DECENAS[ 1 ]
initial
begin
	DECENAS_expected[1] = 1'bX;
end 
// expected DECENAS[ 0 ]
initial
begin
	DECENAS_expected[0] = 1'bX;
end 
// expected UNIDADES[ 6 ]
initial
begin
	UNIDADES_expected[6] = 1'bX;
end 
// expected UNIDADES[ 5 ]
initial
begin
	UNIDADES_expected[5] = 1'bX;
end 
// expected UNIDADES[ 4 ]
initial
begin
	UNIDADES_expected[4] = 1'bX;
end 
// expected UNIDADES[ 3 ]
initial
begin
	UNIDADES_expected[3] = 1'bX;
end 
// expected UNIDADES[ 2 ]
initial
begin
	UNIDADES_expected[2] = 1'bX;
end 
// expected UNIDADES[ 1 ]
initial
begin
	UNIDADES_expected[1] = 1'bX;
end 
// expected UNIDADES[ 0 ]
initial
begin
	UNIDADES_expected[0] = 1'bX;
end 
// generate trigger
always @(DECENAS_expected or DECENAS or UNIDADES_expected or UNIDADES)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DECENAS = %b | expected UNIDADES = %b | ",DECENAS_expected_prev,UNIDADES_expected_prev);
	$display("| real DECENAS = %b | real UNIDADES = %b | ",DECENAS_prev,UNIDADES_prev);
`endif
	if (
		( DECENAS_expected_prev[0] !== 1'bx ) && ( DECENAS_prev[0] !== DECENAS_expected_prev[0] )
		&& ((DECENAS_expected_prev[0] !== last_DECENAS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[0] = DECENAS_expected_prev[0];
	end
	if (
		( DECENAS_expected_prev[1] !== 1'bx ) && ( DECENAS_prev[1] !== DECENAS_expected_prev[1] )
		&& ((DECENAS_expected_prev[1] !== last_DECENAS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[1] = DECENAS_expected_prev[1];
	end
	if (
		( DECENAS_expected_prev[2] !== 1'bx ) && ( DECENAS_prev[2] !== DECENAS_expected_prev[2] )
		&& ((DECENAS_expected_prev[2] !== last_DECENAS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[2] = DECENAS_expected_prev[2];
	end
	if (
		( DECENAS_expected_prev[3] !== 1'bx ) && ( DECENAS_prev[3] !== DECENAS_expected_prev[3] )
		&& ((DECENAS_expected_prev[3] !== last_DECENAS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[3] = DECENAS_expected_prev[3];
	end
	if (
		( DECENAS_expected_prev[4] !== 1'bx ) && ( DECENAS_prev[4] !== DECENAS_expected_prev[4] )
		&& ((DECENAS_expected_prev[4] !== last_DECENAS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[4] = DECENAS_expected_prev[4];
	end
	if (
		( DECENAS_expected_prev[5] !== 1'bx ) && ( DECENAS_prev[5] !== DECENAS_expected_prev[5] )
		&& ((DECENAS_expected_prev[5] !== last_DECENAS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[5] = DECENAS_expected_prev[5];
	end
	if (
		( DECENAS_expected_prev[6] !== 1'bx ) && ( DECENAS_prev[6] !== DECENAS_expected_prev[6] )
		&& ((DECENAS_expected_prev[6] !== last_DECENAS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DECENAS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DECENAS_expected_prev);
		$display ("     Real value = %b", DECENAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DECENAS_exp[6] = DECENAS_expected_prev[6];
	end
	if (
		( UNIDADES_expected_prev[0] !== 1'bx ) && ( UNIDADES_prev[0] !== UNIDADES_expected_prev[0] )
		&& ((UNIDADES_expected_prev[0] !== last_UNIDADES_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[0] = UNIDADES_expected_prev[0];
	end
	if (
		( UNIDADES_expected_prev[1] !== 1'bx ) && ( UNIDADES_prev[1] !== UNIDADES_expected_prev[1] )
		&& ((UNIDADES_expected_prev[1] !== last_UNIDADES_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[1] = UNIDADES_expected_prev[1];
	end
	if (
		( UNIDADES_expected_prev[2] !== 1'bx ) && ( UNIDADES_prev[2] !== UNIDADES_expected_prev[2] )
		&& ((UNIDADES_expected_prev[2] !== last_UNIDADES_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[2] = UNIDADES_expected_prev[2];
	end
	if (
		( UNIDADES_expected_prev[3] !== 1'bx ) && ( UNIDADES_prev[3] !== UNIDADES_expected_prev[3] )
		&& ((UNIDADES_expected_prev[3] !== last_UNIDADES_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[3] = UNIDADES_expected_prev[3];
	end
	if (
		( UNIDADES_expected_prev[4] !== 1'bx ) && ( UNIDADES_prev[4] !== UNIDADES_expected_prev[4] )
		&& ((UNIDADES_expected_prev[4] !== last_UNIDADES_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[4] = UNIDADES_expected_prev[4];
	end
	if (
		( UNIDADES_expected_prev[5] !== 1'bx ) && ( UNIDADES_prev[5] !== UNIDADES_expected_prev[5] )
		&& ((UNIDADES_expected_prev[5] !== last_UNIDADES_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[5] = UNIDADES_expected_prev[5];
	end
	if (
		( UNIDADES_expected_prev[6] !== 1'bx ) && ( UNIDADES_prev[6] !== UNIDADES_expected_prev[6] )
		&& ((UNIDADES_expected_prev[6] !== last_UNIDADES_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UNIDADES[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UNIDADES_expected_prev);
		$display ("     Real value = %b", UNIDADES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_UNIDADES_exp[6] = UNIDADES_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#600000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sistema_completo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BUTTONCL;
reg BUTTONENA;
reg CLK_OUT;
// wires                                               
wire [6:0] DECENAS;
wire [6:0] UNIDADES;

wire sampler;                             

// assign statements (if any)                          
sistema_completo i1 (
// port map - connection between master ports and signals/registers   
	.BUTTONCL(BUTTONCL),
	.BUTTONENA(BUTTONENA),
	.CLK_OUT(CLK_OUT),
	.DECENAS(DECENAS),
	.UNIDADES(UNIDADES)
);

// BUTTONCL
initial
begin
	BUTTONCL = 1'b0;
	BUTTONCL = #20000 1'b1;
	BUTTONCL = #270000 1'b0;
	BUTTONCL = #40000 1'b1;
	BUTTONCL = #150000 1'b0;
	BUTTONCL = #70000 1'b1;
end 

// BUTTONENA
initial
begin
	BUTTONENA = 1'b1;
	BUTTONENA = #160000 1'b0;
	BUTTONENA = #60000 1'b1;
	BUTTONENA = #260000 1'b0;
	BUTTONENA = #70000 1'b1;
end 

// CLK_OUT
always
begin
	CLK_OUT = 1'b0;
	CLK_OUT = #5000 1'b1;
	#5000;
end 

sistema_completo_vlg_sample_tst tb_sample (
	.BUTTONCL(BUTTONCL),
	.BUTTONENA(BUTTONENA),
	.CLK_OUT(CLK_OUT),
	.sampler_tx(sampler)
);

sistema_completo_vlg_check_tst tb_out(
	.DECENAS(DECENAS),
	.UNIDADES(UNIDADES),
	.sampler_rx(sampler)
);
endmodule

